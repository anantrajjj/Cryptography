Multiplication Cipher

import java.util.Arrays;
public class Question2 {
    public static int[] polyMult(int[] poly1, int[] poly2, int[] modPoly) {
        int m = poly1.length;
        int n = poly2.length;
        int degreeResult = m + n - 2;
        int[] result = new int[degreeResult + 1];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                result[i + j] ^= poly1[i] * poly2[j];
            }
        }
        while (degree(result) >= degree(modPoly)) {
            int shift = degree(result) - degree(modPoly);
            for (int i = 0; i < modPoly.length; i++) {
                result[i + shift] ^= modPoly[i];
            }
        }
        return result;
    }
    public static int degree(int[] poly) {
        for (int i = poly.length - 1; i >= 0; i--) {
            if (poly[i] != 0) {
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        int[] poly1 = {0, 0, 0, 0, 1, 1, 1, 1, 1};
        int[] poly2 = {1, 1, 0, 1, 0, 0, 0, 0, 0};
        int[] modulusPoly = {1, 1, 0, 0, 0, 1, 1, 0, 1};

        int[] product = polyMult(poly1, poly2, modulusPoly);
        System.out.println("Product: " + Arrays.toString(product));
    }
}
