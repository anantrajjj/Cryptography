DES 

import java.math.BigInteger;
public class DESAlgorithm {
    // S-box operation
    public static String splitAndApplyXOR(String binaryInput) {
        // Split the input into 8 groups of 6 bits each
        String[] inputGroups = new String[8];
        for (int i = 0; i < 48; i += 6) {
            inputGroups[i / 6] = binaryInput.substring(i, i + 6);
        }
        // Apply XOR operations to each group
        StringBuilder outputBits = new StringBuilder();
        for (String group : inputGroups) {
            // Extract individual bits
            int b1 = Character.getNumericValue(group.charAt(0));
            int b2 = Character.getNumericValue(group.charAt(1));
            int b3 = Character.getNumericValue(group.charAt(2));
            int b4 = Character.getNumericValue(group.charAt(3));
            int b5 = Character.getNumericValue(group.charAt(4));
            int b6 = Character.getNumericValue(group.charAt(5));

            // Compute the XOR results
            int result1 = b1 ^ b2 ^ b3;
            int result2 = b2 ^ b3 ^ b4;
            int result3 = b3 ^ b4 ^ b5;
            int result4 = b4 ^ b5 ^ b6;

            // Append the results to the output
            outputBits.append(result1).append(result2).append(result3).append(result4);
        }
        return outputBits.toString();
    }
    // Convert hexadecimal input to binary
    public static String hexToBinLoop(String hexNum) {
        StringBuilder binaryStr = new StringBuilder();
        for (char digit : hexNum.toCharArray()) {
            switch (digit) {
                case '0':
                    binaryStr.append("0000");
                    break;
                case '1':
                    binaryStr.append("0001");
                    break;
                case '2':
                    binaryStr.append("0010");
                    break;
                case '3':
                    binaryStr.append("0011");
                    break;
                case '4':
                    binaryStr.append("0100");
                    break;
                case '5':
                    binaryStr.append("0101");
                    break;
                case '6':
                    binaryStr.append("0110");
                    break;
                case '7':
                    binaryStr.append("0111");
                    break;
                case '8':
                    binaryStr.append("1000");
                    break;
                case '9':
                    binaryStr.append("1001");
                    break;
                case 'A':
                    binaryStr.append("1010");
                    break;
                case 'B':
                    binaryStr.append("1011");
                    break;
                case 'C':
                    binaryStr.append("1100");
                    break;
                case 'D':
                    binaryStr.append("1101");
                    break;
                case 'E':
                    binaryStr.append("1110");
                    break;
                case 'F':
                    binaryStr.append("1111");
                    break;
            }
        }
        return binaryStr.toString();
    }
    // XOR of two binary strings
    public static String xorBinaryStrings(String a, String b) {
        // Convert binary strings to BigInteger and perform XOR
        BigInteger result = new BigInteger(a, 2).xor(new BigInteger(b, 2));
        // Convert the result back to a binary string with zero-padding
        return String.format("%" + Math.max(a.length(), b.length()) + "s", result.toString(2)).replace(' ', '0');
    }

    public static void main(String[] args) {
        String hexInput = "43AB5678ABCD8923";
        String binaryInput = hexToBinLoop(hexInput);

        // Initial permutation (IP)
        int[] initialPermutationBox = {64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        StringBuilder permutedBlock = new StringBuilder();
        for (int i : initialPermutationBox) {
            permutedBlock.append(binaryInput.charAt(i - 1));
        }
        String LPT = permutedBlock.substring(0, 32);
        String RPT = permutedBlock.substring(32);

        String hexKey = "789ABCDE4321";
        // Convert hexadecimal key to binary
        String binaryKey = hexToBinLoop(hexKey);

        // 16 rounds of operation
        for (int roundNum = 0; roundNum < 15; roundNum++) {
            // Expand RPT using expansion P-box
            int[] expansionPBox = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16, 1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 10, 9, 30, 26, 7, 6, 5, 4};
            StringBuilder expandedRPT = new StringBuilder();
            for (int i : expansionPBox) {
                expandedRPT.append(RPT.charAt(i - 1));
            }

            // XOR expandedRPT with binaryKey
            String result = xorBinaryStrings(expandedRPT.toString(), binaryKey);

            // Apply S-boxes
            String sboxResult = splitAndApplyXOR(result);

            int[] straightPBox = {32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
            StringBuilder result32 = new StringBuilder();
            for (int i : straightPBox) {
                result32.append(sboxResult.charAt(i - 1));
            }

            // Form L2 by XOR-ing R1 with S-box outputs
            String L2 = xorBinaryStrings(LPT, result32.toString());

            // Swap L2 and R1
            LPT = RPT;
            RPT = L2;
        }
        int[] expansionPBox = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13, 14, 15, 20, 19, 18, 17, 16, 1, 2, 3, 4, 5, 6, 7, 8, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 10, 9, 30, 26, 7, 6, 5, 4};
        StringBuilder expandedRPT = new StringBuilder();
        for (int i : expansionPBox) {
            expandedRPT.append(RPT.charAt(i - 1));
        }
        // XOR expandedRPT with binaryKey
        String result = xorBinaryStrings(expandedRPT.toString(), binaryKey);

        // Apply S-boxes
        String sboxResult = splitAndApplyXOR(result);

        int[] straightPBox = {32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        StringBuilder result32 = new StringBuilder();
        for (int i : straightPBox) {
            result32.append(sboxResult.charAt(i - 1));
        }

        // Form L2 by XOR-ing R1 with S-box outputs
        String L2 = xorBinaryStrings(LPT, result32.toString());

        // No Swapping of L2 and R1
        LPT = L2;

        // Combine LPT and RPT
        String ciphertextBlock = LPT + RPT;

        // Final permutation (FP)
        int[] finalPermutationBox = {64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        StringBuilder ciphertext = new StringBuilder();
        for (int i : finalPermutationBox) {
            ciphertext.append(ciphertextBlock.charAt(i - 1));
        }

        System.out.println("Ciphertext: " + ciphertext);

        // Convert binary ciphertext to hexadecimal
        BigInteger integerVal = new BigInteger(ciphertext.toString(), 2);
        String hexCiphertext = integerVal.toString(16).toUpperCase();
        System.out.println("Ciphertext in hexadecimal: " + hexCiphertext);
    }
}
