Multiplicative Zn Table

import java.util.Scanner;

public class MultiplicativeTables {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the value of n:");
        int n = scanner.nextInt();

        System.out.println("Enter the value of p:");
        int p = scanner.nextInt();

        System.out.println("Multiplicative Table for Z" + n + " modulo:");
        generateZnMultiplicativeTable(n);

        System.out.println("Multiplicative Table for GF(2^" + p + ") in polynomial form:");
        generateGF2pMultiplicativeTableInPolynomialForm(p);

        scanner.close();
    }
    // Function to generate Multiplicative Table for Zn modulo
    public static void generateZnMultiplicativeTable(int n) {
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < n; j++) {
                System.out.print((i * j) % n + "\t");
            }
            System.out.println();
        }
    }
    // Function to generate Multiplicative Table for GF(2^p) in polynomial form
    public static void generateGF2pMultiplicativeTableInPolynomialForm(int p) {
        int n = (int) Math.pow(2, p);
        String[] polynomialForms = new String[n];

        // Generate polynomial representations for each element
        for (int i = 0; i < n; i++) {
            polynomialForms[i] = convertToPolynomial(i, p);
        }
        // Calculate the maximum length of polynomial
        int maxPolynomialLength = polynomialForms[n - 1].length();

        // Print the Multiplicative Table
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                String result = polynomialMultiplication(i, j, polynomialForms);
                System.out.print(String.format("%-" + maxPolynomialLength + "s", result) + "\t");
            }
            System.out.println();
        }
    }
    // Function to convert a number to polynomial form
    public static String convertToPolynomial(int number, int p) {
        StringBuilder polynomial = new StringBuilder();
        if (number == 0) {
            return "0";
        }
        for (int i = p - 1; i >= 0; i--) {
            if (((number >> i) & 1) == 1) {
                if (!polynomial.isEmpty()) {
                    polynomial.append(" + ");
                }
                if (i == 0) {
                    polynomial.append("1");
                } else if (i == 1) {
                    polynomial.append("x");
                } else if (i == 2) {
                    polynomial.append("x^2");
                } else {
                    polynomial.append("x^").append(i);
                }
            }
        }
        return polynomial.toString();
    }
    // Function to multiply polynomials in GF(2^p)
    public static String polynomialMultiplication(int a, int b, String[] polynomialForms) {
        if (a == 0 || b == 0) {
            return "0";
        }
        int result = (a + b) % polynomialForms.length;
        return polynomialForms[result];
    }
}
